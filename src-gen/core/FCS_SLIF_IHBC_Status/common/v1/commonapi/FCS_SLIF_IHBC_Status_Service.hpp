/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_FCS__SLIF__IHBC__STATUS__SERVICE_HPP_
#define V1_COMMONAPI_FCS__SLIF__IHBC__STATUS__SERVICE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

class FCS_SLIF_IHBC_Status_Service {
public:
    virtual ~FCS_SLIF_IHBC_Status_Service() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct FCS_IHBC_Status_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            OFF = 0,
            Standby = 1,
            Active = 2,
            TemporaryError = 3,
            PermanentError = 4
        };
    
        FCS_IHBC_Status_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::OFF)) {}
        FCS_IHBC_Status_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::OFF):
                case static_cast< uint8_t>(Literal::Standby):
                case static_cast< uint8_t>(Literal::Active):
                case static_cast< uint8_t>(Literal::TemporaryError):
                case static_cast< uint8_t>(Literal::PermanentError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_IHBC_Status_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_IHBC_Status_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_IHBC_Status_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_IHBC_Status_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_IHBC_Status_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_IHBC_Status_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::OFF): return "OFF";
            case static_cast< uint8_t>(Literal::Standby): return "Standby";
            case static_cast< uint8_t>(Literal::Active): return "Active";
            case static_cast< uint8_t>(Literal::TemporaryError): return "TemporaryError";
            case static_cast< uint8_t>(Literal::PermanentError): return "PermanentError";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct FCS_IHBC_LightDistribReq_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            HighBeamNotRecommended = 0,
            HighBeamRecommended = 1
        };
    
        FCS_IHBC_LightDistribReq_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::HighBeamNotRecommended)) {}
        FCS_IHBC_LightDistribReq_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::HighBeamNotRecommended):
                case static_cast< uint8_t>(Literal::HighBeamRecommended):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_IHBC_LightDistribReq_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_IHBC_LightDistribReq_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_IHBC_LightDistribReq_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_IHBC_LightDistribReq_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_IHBC_LightDistribReq_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_IHBC_LightDistribReq_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::HighBeamNotRecommended): return "HighBeamNotRecommended";
            case static_cast< uint8_t>(Literal::HighBeamRecommended): return "HighBeamRecommended";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct FCS_IHBC_Switch_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            Reserved = 0,
            OFF = 1,
            ON = 2
        };
    
        FCS_IHBC_Switch_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::Reserved)) {}
        FCS_IHBC_Switch_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::Reserved):
                case static_cast< uint8_t>(Literal::OFF):
                case static_cast< uint8_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_IHBC_Switch_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_IHBC_Switch_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_IHBC_Switch_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_IHBC_Switch_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_IHBC_Switch_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_IHBC_Switch_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::Reserved): return "Reserved";
            case static_cast< uint8_t>(Literal::OFF): return "OFF";
            case static_cast< uint8_t>(Literal::ON): return "ON";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct FCS_SLIF_Switch_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            Reserved = 0,
            OFF = 1,
            ON = 2
        };
    
        FCS_SLIF_Switch_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::Reserved)) {}
        FCS_SLIF_Switch_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::Reserved):
                case static_cast< uint8_t>(Literal::OFF):
                case static_cast< uint8_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_SLIF_Switch_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_SLIF_Switch_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_SLIF_Switch_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_SLIF_Switch_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_SLIF_Switch_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_SLIF_Switch_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::Reserved): return "Reserved";
            case static_cast< uint8_t>(Literal::OFF): return "OFF";
            case static_cast< uint8_t>(Literal::ON): return "ON";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct FCS_Sign_SpeedLimitCancelled_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            SpeedLimit = 0,
            SpeedLimitCancelled = 1
        };
    
        FCS_Sign_SpeedLimitCancelled_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SpeedLimit)) {}
        FCS_Sign_SpeedLimitCancelled_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SpeedLimit):
                case static_cast< uint8_t>(Literal::SpeedLimitCancelled):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_Sign_SpeedLimitCancelled_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_Sign_SpeedLimitCancelled_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_Sign_SpeedLimitCancelled_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_Sign_SpeedLimitCancelled_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_Sign_SpeedLimitCancelled_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_Sign_SpeedLimitCancelled_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SpeedLimit): return "SpeedLimit";
            case static_cast< uint8_t>(Literal::SpeedLimitCancelled): return "SpeedLimitCancelled";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct FCS_SLIF_Status_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            OFF = 0,
            Operating_FusionMode = 1,
            Operating_VisionOnlyMode = 2,
            Operating_NavigationOnlyMode = 3,
            SLIFFailure = 4
        };
    
        FCS_SLIF_Status_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::OFF)) {}
        FCS_SLIF_Status_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::OFF):
                case static_cast< uint8_t>(Literal::Operating_FusionMode):
                case static_cast< uint8_t>(Literal::Operating_VisionOnlyMode):
                case static_cast< uint8_t>(Literal::Operating_NavigationOnlyMode):
                case static_cast< uint8_t>(Literal::SLIFFailure):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_SLIF_Status_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_SLIF_Status_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_SLIF_Status_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_SLIF_Status_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_SLIF_Status_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_SLIF_Status_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::OFF): return "OFF";
            case static_cast< uint8_t>(Literal::Operating_FusionMode): return "Operating_FusionMode";
            case static_cast< uint8_t>(Literal::Operating_VisionOnlyMode): return "Operating_VisionOnlyMode";
            case static_cast< uint8_t>(Literal::Operating_NavigationOnlyMode): return "Operating_NavigationOnlyMode";
            case static_cast< uint8_t>(Literal::SLIFFailure): return "SLIFFailure";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct FCS_SLIF_Warning_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            NoWarning = 0,
            Warning = 1
        };
    
        FCS_SLIF_Warning_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::NoWarning)) {}
        FCS_SLIF_Warning_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::NoWarning):
                case static_cast< uint8_t>(Literal::Warning):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FCS_SLIF_Warning_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FCS_SLIF_Warning_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FCS_SLIF_Warning_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FCS_SLIF_Warning_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FCS_SLIF_Warning_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FCS_SLIF_Warning_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::NoWarning): return "NoWarning";
            case static_cast< uint8_t>(Literal::Warning): return "Warning";
            default: return "UNDEFINED";
            }
        }
    };
    struct FCS_SLIF_IHBC_Status_Struct : CommonAPI::Struct< FCS_IHBC_Status_Enum, FCS_IHBC_LightDistribReq_Enum, FCS_IHBC_Switch_Enum, FCS_SLIF_Switch_Enum, uint8_t, FCS_Sign_SpeedLimitCancelled_Enum, FCS_SLIF_Status_Enum, FCS_SLIF_Warning_Enum, uint8_t, uint8_t> {
    
        FCS_SLIF_IHBC_Status_Struct()
        {
            std::get< 0>(values_) = FCS_IHBC_Status_Enum();
            std::get< 1>(values_) = FCS_IHBC_LightDistribReq_Enum();
            std::get< 2>(values_) = FCS_IHBC_Switch_Enum();
            std::get< 3>(values_) = FCS_SLIF_Switch_Enum();
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = FCS_Sign_SpeedLimitCancelled_Enum();
            std::get< 6>(values_) = FCS_SLIF_Status_Enum();
            std::get< 7>(values_) = FCS_SLIF_Warning_Enum();
            std::get< 8>(values_) = 0u;
            std::get< 9>(values_) = 0u;
        }
        FCS_SLIF_IHBC_Status_Struct(const FCS_IHBC_Status_Enum &_FCS_IHBC_Status, const FCS_IHBC_LightDistribReq_Enum &_FCS_IHBC_LightDistribReq, const FCS_IHBC_Switch_Enum &_FCS_IHBC_Switch, const FCS_SLIF_Switch_Enum &_FCS_SLIF_Switch, const uint8_t &_FCS_Sign_Speedlimit, const FCS_Sign_SpeedLimitCancelled_Enum &_FCS_Sign_SpeedLimitCancelled, const FCS_SLIF_Status_Enum &_FCS_SLIF_Status, const FCS_SLIF_Warning_Enum &_FCS_SLIF_Warning, const uint8_t &_FCS_SLIF_IHBC_Status_AliveCounter, const uint8_t &_FCS_SLIF_IHBC_Status_CheckSum)
        {
            std::get< 0>(values_) = _FCS_IHBC_Status;
            std::get< 1>(values_) = _FCS_IHBC_LightDistribReq;
            std::get< 2>(values_) = _FCS_IHBC_Switch;
            std::get< 3>(values_) = _FCS_SLIF_Switch;
            std::get< 4>(values_) = _FCS_Sign_Speedlimit;
            std::get< 5>(values_) = _FCS_Sign_SpeedLimitCancelled;
            std::get< 6>(values_) = _FCS_SLIF_Status;
            std::get< 7>(values_) = _FCS_SLIF_Warning;
            std::get< 8>(values_) = _FCS_SLIF_IHBC_Status_AliveCounter;
            std::get< 9>(values_) = _FCS_SLIF_IHBC_Status_CheckSum;
        }
        inline const FCS_IHBC_Status_Enum &getFCS_IHBC_Status() const { return std::get< 0>(values_); }
        inline void setFCS_IHBC_Status(const FCS_IHBC_Status_Enum &_value) { std::get< 0>(values_) = _value; }
        inline const FCS_IHBC_LightDistribReq_Enum &getFCS_IHBC_LightDistribReq() const { return std::get< 1>(values_); }
        inline void setFCS_IHBC_LightDistribReq(const FCS_IHBC_LightDistribReq_Enum &_value) { std::get< 1>(values_) = _value; }
        inline const FCS_IHBC_Switch_Enum &getFCS_IHBC_Switch() const { return std::get< 2>(values_); }
        inline void setFCS_IHBC_Switch(const FCS_IHBC_Switch_Enum &_value) { std::get< 2>(values_) = _value; }
        inline const FCS_SLIF_Switch_Enum &getFCS_SLIF_Switch() const { return std::get< 3>(values_); }
        inline void setFCS_SLIF_Switch(const FCS_SLIF_Switch_Enum &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getFCS_Sign_Speedlimit() const { return std::get< 4>(values_); }
        inline void setFCS_Sign_Speedlimit(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const FCS_Sign_SpeedLimitCancelled_Enum &getFCS_Sign_SpeedLimitCancelled() const { return std::get< 5>(values_); }
        inline void setFCS_Sign_SpeedLimitCancelled(const FCS_Sign_SpeedLimitCancelled_Enum &_value) { std::get< 5>(values_) = _value; }
        inline const FCS_SLIF_Status_Enum &getFCS_SLIF_Status() const { return std::get< 6>(values_); }
        inline void setFCS_SLIF_Status(const FCS_SLIF_Status_Enum &_value) { std::get< 6>(values_) = _value; }
        inline const FCS_SLIF_Warning_Enum &getFCS_SLIF_Warning() const { return std::get< 7>(values_); }
        inline void setFCS_SLIF_Warning(const FCS_SLIF_Warning_Enum &_value) { std::get< 7>(values_) = _value; }
        inline const uint8_t &getFCS_SLIF_IHBC_Status_AliveCounter() const { return std::get< 8>(values_); }
        inline void setFCS_SLIF_IHBC_Status_AliveCounter(const uint8_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint8_t &getFCS_SLIF_IHBC_Status_CheckSum() const { return std::get< 9>(values_); }
        inline void setFCS_SLIF_IHBC_Status_CheckSum(const uint8_t &_value) { std::get< 9>(values_) = _value; }
        inline bool operator==(const FCS_SLIF_IHBC_Status_Struct& _other) const {
        return (getFCS_IHBC_Status() == _other.getFCS_IHBC_Status() && getFCS_IHBC_LightDistribReq() == _other.getFCS_IHBC_LightDistribReq() && getFCS_IHBC_Switch() == _other.getFCS_IHBC_Switch() && getFCS_SLIF_Switch() == _other.getFCS_SLIF_Switch() && getFCS_Sign_Speedlimit() == _other.getFCS_Sign_Speedlimit() && getFCS_Sign_SpeedLimitCancelled() == _other.getFCS_Sign_SpeedLimitCancelled() && getFCS_SLIF_Status() == _other.getFCS_SLIF_Status() && getFCS_SLIF_Warning() == _other.getFCS_SLIF_Warning() && getFCS_SLIF_IHBC_Status_AliveCounter() == _other.getFCS_SLIF_IHBC_Status_AliveCounter() && getFCS_SLIF_IHBC_Status_CheckSum() == _other.getFCS_SLIF_IHBC_Status_CheckSum());
        }
        inline bool operator!=(const FCS_SLIF_IHBC_Status_Struct &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* FCS_SLIF_IHBC_Status_Service::getInterface() {
    return ("commonapi.FCS_SLIF_IHBC_Status_Service:v1_0");
}

CommonAPI::Version FCS_SLIF_IHBC_Status_Service::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_FCS__SLIF__IHBC__STATUS__SERVICE_HPP_
